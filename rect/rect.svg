<svg xmlns="http://www.w3.org/2000/svg" viewBox="-1200 -1200 2400 2400" preserveAspectRatio="xMidYMid meet" onload="run()">
	<title>rect</title>
	<rect class="viewBox" style="x: -100%; y: -100%; width: 200%; height: 200%; fill: url(#pattern-grid);"/>
	<pattern id="pattern-grid" width="100" height="100" patternUnits="userSpaceOnUse">
		<rect style="stroke: teal; stroke-width: 1px; fill:none;" x="0" y="0" width="100" height="100"/>
	</pattern>
	<text x="-1200" y="-1000" class="title">rect</text>

	<style>
		text.title {
			stroke:#000a;
			fill: #888a;
			font-size: 32ex;
		}
		path {
			stroke: blue;
			stroke-width: 1;
			fill: #00fa;  <!-- none; -->
			fill-rule: evenodd; <!-- evenodd, nonzero -->
			<!-- stroke-dasharray: 2 7; -->
			stroke-linecap: round;
			stroke-linejoin: bevel;
			marker-start:url(#markerStart);
			marker-end:url(#markerEnd);
		}


		circle {
			stroke: cyan;
			fill: cadetblue;
		}

		rect {
			stroke: red;
			fill: pink;
		}

		text {
			fill: tan;
			stroke: tomato;
			font-size: 32em;
		}


		.shadow {
			filter: drop-shadow(0px 40px 20px #444b);
		}

		.feShadow {
			filter: url(#shadow1);
		}
	</style>

	<script>
		<![CDATA[

		class Rect {
			constructor(x, y, width, height, rx=0, ry=0) {
				this.x 		= x;
				this.y 		= y;
				this.width	= width;
				this.height	= height;
				this.rx		= rx;
				this.ry		= ry;
			}
		}

		class RectPlus extends Rect {
			constructor(x,y,width,height,rx,ry,option={}) {
				super(x,y,width,height,rx,ry);
				this.option = option;
			}

		}

		function run() {


			const r1 = new Rect(-500, -500, 400, 500 , 100, 100);
			r1svg =  getRect(r1);
			document.getElementById('output').innerHTML += r1svg;


			const r2 = new RectPlus(-100, -100, 400, 500 , 50, 90, {padding:50});
			r2svg =  getRectPath(r2);

			document.getElementById('output').innerHTML += r2svg;

		}


		function getRect(rect) {
			result = `
				<rect x="${rect.x}" y="${rect.y}" width="${rect.width}" height="${rect.height}" rx="${rect.rx}" ry="${rect.ry}">
					<title>${JSON.stringify(rect)}</title>
				</rect>
			`;
			return result;
		}

		function getRectPadding(rect) {
			result = `
				<rect
					x="${rect.x + rect.option.padding}"
					y="${rect.y + rect.option.padding}"
					width="${rect.width - 2*rect.option.padding}"
					height="${rect.height - 2*rect.option.padding}"
					rx="${rect.rx}"
					ry="${rect.ry}">
					<title>${JSON.stringify(rect)}</title>
				</rect>
			`;
			return result;
		}



		function getRectPath(rect) {
			const x = rect.x + rect.option.padding;
			const y = rect.y + rect.option.padding;
			const width  = rect.width - 2*rect.option.padding;
			const height = rect.height - 2*rect.option.padding;
			result = `
				<path d="
					M ${x}, ${y}
					h ${width}
					v ${height}
					h ${-width}
					v ${-height}
					z">
					<title>${JSON.stringify(rect)}</title>
				</path>
			`;
			return result;
		}



		function draw(from, to, base, element) {

			let output = '';

			for (let i=from;i<=to;i++) {
				output += `
					<g style="transform:translate(0px,${(i-from)*100}px)" data-number="${i}">
						<text x="-300">${i}</text>
						${getNumberSVG(i, base)}
					</g>
				`;
			}

			document.getElementById(element).innerHTML = output;
		}

		// ]]>
	</script>


	<defs>


		<g id="drawing" class="">
			<rect x="0" y="100" width="600" height="800" />
			<text x="50" y="50" >
				rect
			</text>
		</g>

		<filter id="shadow1" color-interpolation-filters="sRGB">
			<feDropShadow dx="-20" dy="20" stdDeviation="3" flood-opacity=".5" flood-color="red"/>
		</filter>

	</defs>

	<!-- <g id="drawing" class=" shadow">
		<circle cx="-100" cy="0" r="600" />
		<rect x="0" y="100" width="600" height="800" />
		<text x="50" y="50" >
			clip
		</text>
	</g> -->

	<!--
	<use href="#drawing" x="-1000" class="clip feShadow"/>

	 <use href="#drawing" x="600" class="clip"/>
	<g class="clip shadow" >
		<use href="#drawing" transform="translate(500)" />
	</g>

	<rect x="0" y="100" width="600" height="800" />
	-->


	<g id="output">
	</g>

</svg>